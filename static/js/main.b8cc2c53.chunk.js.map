{"version":3,"sources":["components/trivia.js","components/game_over.js","components/next.js","components/splash.js","App.js","index.js"],"names":["Trivia","handleUpdate","clicked","questionNumber","triviaQuestion","question","correct","incorrect","useState","shuffledAnswers","setShuffledAnswers","useEffect","sort","Math","random","className","map","answer","idx","disabled","onClick","e","GameOver","score","handleStartGame","Next","nextQuestion","buttonText","SplashContainer","styled","div","SplashItem","RenderButton","button","Splash","setRenderSplash","App","allQuestions","setAllQuestions","questions","setQuestions","setQuestionNumber","setScore","setClicked","gameOver","setGameOver","nextButton","setNextButton","renderSplash","generateRandomQuestions","slice","fetch","then","res","json","data","document","querySelectorAll","forEach","classList","remove","length","currButton","buttons","add","innerHTML","highlightAnswers","currentTarget","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b8cc2c53.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport const Trivia = ({ \n  handleUpdate, \n  clicked, \n  questionNumber,\n  triviaQuestion: { question, correct, incorrect }}) => {\n\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\n\n  // Whenever the question changes, shuffle the new question's answers\n  useEffect(() => {\n    setShuffledAnswers([correct, ...incorrect].sort(() => Math.random() - 0.5));\n  }, [questionNumber, correct, incorrect]);\n\n  return (\n    <div>\n      <div className='trivia-question-container'>\n        <h1 className='trivia-question'>{questionNumber}) {question}</h1>\n      </div>\n      <div className='trivia-answers-container'>\n        {shuffledAnswers.map((answer, idx) => {\n          return (\n            <button\n              key={idx} \n              disabled={clicked}\n              onClick={(e) => handleUpdate(e, answer)}\n              className='trivia-answer-button'>{answer}</button>\n          );\n        })}\n      </div>\n    </div>\n  );\n};","import React from 'react';\n\nexport const GameOver = ({ score, handleStartGame }) => {\n  return (\n    <div className='game-over-container'>\n      <h2 className='score'>You answered {score} questions correctly!</h2>\n      <button onClick={handleStartGame} className='play-again'>Play Again</button>\n    </div>\n  );\n};","import React from 'react';\n\nexport const Next = ({ nextQuestion, questionNumber }) => {\n  let buttonText = questionNumber === 9 ? 'Results' : 'Next Question'; \n  return (\n    <div>\n      <button onClick={nextQuestion} className='next-button'>{buttonText}</button>\n    </div>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\n\nconst SplashContainer = styled.div`\n  display: block;\n`;\n\nconst SplashItem = styled.div`\n  font-size: 20px;\n`;\n\nconst RenderButton = styled.button`\n  font-size: 16px;\n  border-radius: 5px;\n  border: none;\n  padding: 8px;\n  transition: background-color 0.25s, color 0.25s;\n  margin-top: 8px;\n\n  &:hover {\n    background-color: rgb(223, 170, 223);\n  }\n`;\n\nexport const Splash = ({ setRenderSplash }) => {\n  return (\n    <SplashContainer>\n      <SplashItem>\n        Welcome to Tandem Trivia! Are you ready to play a game?\n      </SplashItem>\n      <RenderButton onClick={() => setRenderSplash(false)}>Get Started</RenderButton>\n    </SplashContainer>\n  )\n};\n","import React, { useState, useEffect } from 'react';\nimport './reset.css';\nimport './trivia.css';\nimport './animations.css';\nimport { Trivia } from './components/trivia';\nimport { GameOver } from './components/game_over';\nimport { Next } from './components/next';\nimport { Splash } from './components/splash';\n\nfunction App() {\n  const [allQuestions, setAllQuestions] = useState([]);\n  const [questions, setQuestions] = useState([]);\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [score, setScore] = useState(0);\n  const [clicked, setClicked] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [nextButton, setNextButton] = useState(false);\n  const [renderSplash, setRenderSplash] = useState(true);\n\n  // On page load, fetch the trivia data\n  useEffect(() => {\n    fetch('./Apprentice_TandemFor400_Data.json')\n      .then(res => res.json())\n      .then(data => {\n        setAllQuestions(data);\n        setQuestions(generateRandomQuestions(data));\n      });\n  }, []);\n\n  // When the question changes, remove the classes for correct/incorrect/selected answers\n  useEffect(() => {\n    const buttons = document.querySelectorAll('.trivia-answer-button');\n    buttons.forEach(button => {\n      button.classList.remove('green');\n      button.classList.remove('red');\n      button.classList.remove('user-answer');\n    });\n  }, [questionNumber]);\n\n  function generateRandomQuestions(questions) {\n    const shuffledQuestions = [...questions].sort(() => Math.random() - 0.5);\n    return shuffledQuestions.slice(0, 10);\n  };\n\n  function handleUpdate(e, answer) {\n    setClicked(true); // Disable clicking\n    const currButton = e.currentTarget;\n    const buttons = document.querySelectorAll('.trivia-answer-button');\n    highlightAnswers(currButton, buttons);\n    if (answer === questions[questionNumber].correct) setScore(score + 1);\n    if (!gameOver) {\n      setNextButton(true); // Render the Next Question button\n    }\n  };\n\n  /* Grab the current button and all the buttons, and add class depending \n  on the correctness of the button's answer */\n  function highlightAnswers(currButton, buttons) {\n    currButton.classList.add('user-answer');\n    buttons.forEach(button => {\n      if (button.innerHTML === questions[questionNumber].correct) {\n        button.classList.add('green');\n      } else {\n        button.classList.add('red');\n      }\n    });\n  };\n\n  function handleStartGame() {\n    setQuestions(generateRandomQuestions(allQuestions));\n    setQuestionNumber(0);\n    setScore(0);\n    setClicked(false);\n    setGameOver(false);\n    setNextButton(false);\n  };\n\n  function nextQuestion() {\n    if (questionNumber + 1 < 10) {\n      setQuestionNumber(questionNumber + 1);\n      setClicked(false);\n      setNextButton(false);\n    } else {\n      setGameOver(true);\n    }\n  };\n\n  /* If the game is over, render the game over component\n  Otherwise check that the questions array is loaded on the page \n  then render the trivia component */\n  return (\n    gameOver ? <GameOver score={score} handleStartGame={handleStartGame} /> : questions.length ? (\n    <div className='trivia-container'>\n      <h1 className='trivia-title'>Tandem Trivia-Hoot!</h1>\n      {renderSplash && <Splash setRenderSplash={setRenderSplash}/>}\n      {!renderSplash && <Trivia \n        questionNumber={questionNumber + 1}\n        triviaQuestion={questions[questionNumber]}\n        handleUpdate={handleUpdate}\n        clicked={clicked} />}\n      {nextButton && \n        <Next nextQuestion={nextQuestion} questionNumber={questionNumber} />} \n      {!renderSplash && <div className='pick-text shimmer'>Pick your answer!</div>}\n    </div>\n  ) : (<div></div>)\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}